"""Content schemas for LLM structured generation.

These schemas define only the content fields that can be generated by LLMs.
They do not include database references, status fields, or system metadata.
"""

from typing import Optional, List, Dict
from pydantic import BaseModel, Field


class ProjectContentSchema(BaseModel):
    """Project content that can be generated by LLM."""

    name: str = Field(..., description="Project title")
    description: Optional[str] = Field(None, description="Project synopsis or description")
    genre: Optional[str] = Field(None, description="Genre of the graphic novel")
    target_audience: Optional[str] = Field(None, description="Intended audience")


class ChapterContentSchema(BaseModel):
    """Chapter content that can be generated by LLM."""

    title: str = Field(..., description="Chapter title")
    description: Optional[str] = Field(None, description="Chapter summary")
    chapter_number: int = Field(..., description="Sequential chapter number")


class SceneContentSchema(BaseModel):
    """Scene content that can be generated by LLM."""

    title: str = Field(..., description="Scene title or description")
    setting: Optional[str] = Field(None, description="Location and time of scene")
    mood: Optional[str] = Field(None, description="Emotional tone of the scene")
    scene_type: str = Field("action", description="Type of scene: action, dialogue, or establishing")


class PanelContentSchema(BaseModel):
    """Panel content that can be generated by LLM."""

    description: str = Field(..., description="Visual description of panel content")
    dialogue: Optional[List[Dict[str, str]]] = Field(
        None,
        description="Character dialogue in panel [{'character': 'name', 'text': 'dialogue'}]"
    )
    narration: Optional[str] = Field(None, description="Narrative text or caption")
    sound_effects: Optional[List[str]] = Field(None, description="Sound effects in the panel")
    panel_type: str = Field("medium_shot", description="Shot type: close_up, medium_shot, or wide_shot")
    visual_prompt: Optional[str] = Field(None, description="Detailed prompt for image generation")


class CharacterContentSchema(BaseModel):
    """Character content that can be generated by LLM."""

    name: str = Field(..., description="Character name")
    description: Optional[str] = Field(None, description="Character personality and role")
    appearance: Optional[str] = Field(None, description="Physical appearance")
    personality: Optional[str] = Field(None, description="Personality traits")
    background: Optional[str] = Field(None, description="Character backstory")
    visual_description: Optional[str] = Field(
        None,
        description="Detailed visual description for image generation"
    )


class LocationContentSchema(BaseModel):
    """Location content that can be generated by LLM."""

    name: str = Field(..., description="Location name")
    description: Optional[str] = Field(None, description="Location description")
    atmosphere: Optional[str] = Field(None, description="Mood and atmosphere")
    key_features: Optional[List[str]] = Field(None, description="Notable features of the location")
    visual_description: Optional[str] = Field(
        None,
        description="Detailed visual description for image generation"
    )


class DraftContentSchema(BaseModel):
    """Draft content generated by LLM."""

    content: str = Field(..., description="Generated content")
    prompt: Optional[str] = Field(None, description="Prompt used for generation")


class ImagePromptSchema(BaseModel):
    """Image generation prompt for LLM."""

    prompt: str = Field(..., description="Main image generation prompt")
    negative_prompt: Optional[str] = Field(None, description="Things to avoid in the image")
    style: Optional[str] = Field(None, description="Art style description")


class InstructionContentSchema(BaseModel):
    """Instruction content for guiding LLM generation."""

    title: str = Field(..., description="Instruction title")
    content: str = Field(..., description="Detailed instruction content")
    priority: int = Field(0, description="Priority for instruction application")