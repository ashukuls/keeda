"""Content schemas for LLM structured generation.

These schemas define only the content fields that can be generated by LLMs.
They do not include database references, status fields, or system metadata.
"""

from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field, field_validator, model_validator


class ProjectContentSchema(BaseModel):
    """Project content that can be generated by LLM."""

    name: str = Field(..., description="Project title")
    description: Optional[str] = Field(None, description="Project synopsis or description")
    genre: Optional[str] = Field(None, description="Genre of the graphic novel")
    target_audience: Optional[str] = Field(None, description="Intended audience")


class ChapterContentSchema(BaseModel):
    """Chapter content that can be generated by LLM."""

    title: str = Field(..., description="Chapter title")
    description: Optional[str] = Field(None, description="Chapter summary")
    chapter_number: int = Field(..., description="Sequential chapter number")


class SceneContentSchema(BaseModel):
    """Scene content that can be generated by LLM."""

    title: str = Field(..., description="Scene title or description")
    setting: Optional[str] = Field(None, description="Location and time of scene")
    mood: Optional[str] = Field(None, description="Emotional tone of the scene")
    scene_type: str = Field("action", description="Type of scene: action, dialogue, or establishing")


class PanelContentSchema(BaseModel):
    """Panel content that can be generated by LLM."""

    description: str = Field(..., description="Visual description of panel content")
    dialogue: Optional[List[Dict[str, str]]] = Field(
        None,
        description="Character dialogue in panel [{'character': 'name', 'text': 'dialogue'}]"
    )
    narration: Optional[str] = Field(None, description="Narrative text or caption")
    sound_effects: Optional[List[str]] = Field(None, description="Sound effects in the panel")
    panel_type: str = Field("medium_shot", description="Shot type: close_up, medium_shot, or wide_shot")
    visual_prompt: Optional[str] = Field(None, description="Detailed prompt for image generation")


class CharacterContentSchema(BaseModel):
    """Character content that can be generated by LLM."""

    name: str = Field(..., description="Character name")
    description: Optional[str] = Field(None, description="Character personality and role")
    appearance: Optional[str] = Field(None, description="Physical appearance")
    personality: Optional[str] = Field(None, description="Personality traits")
    background: Optional[str] = Field(None, description="Character backstory")
    visual_description: Optional[str] = Field(
        None,
        description="Detailed visual description for image generation"
    )


class LocationContentSchema(BaseModel):
    """Location content that can be generated by LLM."""

    name: str = Field(..., description="Location name")
    description: Optional[str] = Field(None, description="Location description")
    atmosphere: Optional[str] = Field(None, description="Mood and atmosphere")
    key_features: Optional[List[str]] = Field(None, description="Notable features of the location")
    visual_description: Optional[str] = Field(
        None,
        description="Detailed visual description for image generation"
    )


class DraftContentSchema(BaseModel):
    """Draft content generated by LLM."""

    content: str = Field(..., description="Generated content")
    prompt: Optional[str] = Field(None, description="Prompt used for generation")


class ImagePromptSchema(BaseModel):
    """Image generation prompt for LLM."""

    prompt: str = Field(..., description="Main image generation prompt")
    negative_prompt: Optional[str] = Field(None, description="Things to avoid in the image")
    style: Optional[str] = Field(None, description="Art style description")


class InstructionContentSchema(BaseModel):
    """Instruction content for guiding LLM generation."""

    title: str = Field(..., description="Instruction title")
    content: str = Field(..., description="Detailed instruction content")
    priority: int = Field(0, description="Priority for instruction application")


# Task-specific output schemas
class SceneSummarySchema(BaseModel):
    """Structured output for scene summary generation task."""

    summary: str = Field(..., description="2-3 paragraph scene summary", min_length=50)
    key_points: List[str] = Field(..., description="List of key plot points", min_length=1)
    emotional_tone: str = Field(..., description="The emotional tone of the scene", min_length=2)
    character_interactions: List[str] = Field(..., description="Key character interactions")
    visual_highlights: List[str] = Field(..., description="Important visual moments")

    @field_validator('summary')
    @classmethod
    def validate_summary(cls, v: str) -> str:
        """Ensure summary is meaningful"""
        if len(v.strip()) < 50:
            raise ValueError('Summary must be at least 50 characters')
        return v

    @field_validator('key_points')
    @classmethod
    def validate_key_points(cls, v: List[str]) -> List[str]:
        """Ensure we have at least one key point"""
        if not v or len(v) == 0:
            raise ValueError('At least one key point is required')
        return v


class ChapterOutlineSchema(BaseModel):
    """Structured output for chapter outline generation task."""

    outline: str = Field(..., description="Complete chapter outline")
    scenes: List[Dict[str, str]] = Field(..., description="Scene breakdown with descriptions")
    pacing_notes: str = Field(..., description="Notes on chapter pacing")
    character_arcs: List[str] = Field(..., description="Character development in this chapter")
    cliffhanger: Optional[str] = Field(None, description="Chapter ending hook")


class DialogueGenerationSchema(BaseModel):
    """Structured output for dialogue generation task."""

    dialogue_lines: List[Dict[str, str]] = Field(
        ...,
        description="List of dialogue lines with character names"
    )
    narration: Optional[str] = Field(None, description="Narrative text")
    internal_thoughts: Optional[List[Dict[str, str]]] = Field(
        None,
        description="Character internal thoughts"
    )
    sound_effects: Optional[List[str]] = Field(None, description="Sound effects")


class CharacterProfileSchema(BaseModel):
    """Structured output for character profile generation task."""

    biography: str = Field(..., description="Character background and history", min_length=50)
    personality_traits: List[str] = Field(..., description="Core personality characteristics", min_length=1)
    motivations: List[str] = Field(..., description="Character goals and desires", min_length=1)
    fears: List[str] = Field(..., description="Character fears and weaknesses")
    relationships: Dict[str, str] = Field(
        default_factory=dict,
        description="Relationships with other characters"
    )
    voice_style: str = Field(..., description="Character's speaking style and patterns")
    character_arc: str = Field(..., description="Potential character development")

    @field_validator('biography')
    @classmethod
    def validate_biography(cls, v: str) -> str:
        """Ensure biography is substantial"""
        if len(v.strip()) < 50:
            raise ValueError('Biography must be at least 50 characters')
        return v

    @field_validator('personality_traits')
    @classmethod
    def validate_traits(cls, v: List[str]) -> List[str]:
        """Ensure we have at least one trait"""
        if not v:
            raise ValueError('At least one personality trait is required')
        return v


class PanelDescriptionSchema(BaseModel):
    """Structured output for panel description generation task."""

    panels: List[Dict[str, Any]] = Field(
        ...,
        description="List of panel descriptions with details"
    )
    transitions: List[str] = Field(..., description="Transitions between panels")
    visual_flow: str = Field(..., description="Overall visual flow of the sequence")